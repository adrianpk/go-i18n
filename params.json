{"name":"go-i18n","tagline":"Translate your Go program into multiple languages","body":"go-i18n [![Build Status](https://secure.travis-ci.org/nicksnyder/go-i18n.png?branch=master)](http://travis-ci.org/nicksnyder/go-i18n)\r\n=======\r\n\r\ngo-i18n is a Go [package](#i18n-package) and a [command](#goi18n-command) that can be used to translate Go programs into multiple lanaguages.\r\n\r\nRequires Go 1.2.\r\n\r\nFeatures\r\n--------\r\n\r\n* Implements [CLDR plural rules](http://cldr.unicode.org/index/cldr-spec/plural-rules).\r\n* Uses [text/template](http://golang.org/pkg/text/template/) for parameter substitution.\r\n* Translation files are simple JSON.\r\n\r\ni18n package\r\n------------\r\n\r\nThe i18n package provides runtime APIs for looking up translated strings.\r\n\r\nA simple example:\r\n\r\n```go\r\npackage main\r\n\r\nimport (\r\n\t\"fmt\"\r\n\t\"github.com/nicksnyder/go-i18n/i18n\"\r\n)\r\n\r\nfunc main() {\r\n\ti18n.MustLoadTranslationFile(\"path/to/fr-FR.all.json\")\r\n\t\r\n\tlocaleIdFromUserland = \"ar-AR\" // e.g. from user preference, accept header, or language cookie\r\n\tdefaultLocale = \"en-US\"        // known valid locale\r\n\tT, _ := i18n.Tfunc(localeIdFromUserland, defaultLocale)\r\n\t\r\n\t// Regular string with no substitutions.\r\n\tfmt.Println(T(\"Hello world\"))\r\n\t\r\n\t// String with variable substitutions.\r\n\tfmt.Println(T(\"Hello {{.Person}}\", map[string]interface{}{\r\n\t\t\"Person\": \"Bob\",\r\n\t}))\r\n\t\r\n\t// Plural string.\r\n\tfmt.Println(T(\"You have {{.Count}} unread emails\", 2))\r\n\t\r\n\t// Plural string with other substitutions.\r\n\tfmt.Println(T(\"{{.Person}} has {{.Count}} unread emails\", 2, map[string]interface{}{\r\n\t\t\"Person\": \"Bob\",\r\n\t}))\r\n\r\n\t// Compound plural string.\r\n\tfmt.Println(T(\"{{.Person}} has {{.Count}} unread email in the past {{.Timeframe}}.\", 3, map[string]interface{}{\r\n\t\t\"Person\":    \"Bob\",\r\n\t\t\"Timeframe\": T(\"{{.Count}} days\", 2),\r\n\t}))\r\n}\r\n```\r\n\r\nUsually it is a good idea to use generic ids for translations instead of the English string.\r\n\r\n```go\r\nT(\"program_greeting\")\r\n```\r\n\r\nA more complete example is [here](i18n/example_test.go).\r\n\r\ngoi18n command\r\n--------------\r\n\r\nThe goi18n command provides functionality for managing the translation process.\r\n\r\n### Installation\r\n\r\nMake sure you have [setup GOPATH](http://golang.org/doc/code.html#GOPATH).\r\n\r\n    go get -u github.com/nicksnyder/go-i18n/goi18n\r\n    goi18n -help\r\n\r\n### Workflow\r\n\r\nA typical workflow looks like this:\r\n\r\n1. Add a new string to your source code.\r\n\r\n    ```go\r\n    T(\"some_page_title\")\r\n    ```\r\n\r\n2. Add the string to en-US.all.json\r\n\r\n    ```json\r\n    [\r\n      {\r\n        \"id\": \"settings_title\",\r\n        \"translation\": \"Settings\"\r\n      }\r\n    ]\r\n    ```\r\n\r\n3. Run goi18n\r\n\r\n    ```\r\n    goi18n path/to/*.all.json\r\n    ```\r\n\r\n4. Send `path/to/*.untranslated.json` to get translated.\r\n5. Run goi18n again to merge the translations\r\n\r\n    ```sh\r\n    goi18n path/to/*.all.json path/to/*.untranslated.json\r\n    ```\r\n\r\nTranslation files\r\n-----------------\r\n\r\nA translation file stores translated and untranslated strings.\r\n\r\nExample:\r\n\r\n```json\r\n[\r\n  {\r\n    \"id\": \"d_days\",\r\n    \"translation\": {\r\n      \"one\": \"{{.Count}} day\",\r\n      \"other\": \"{{.Count}} days\"\r\n    }\r\n  },\r\n  {\r\n    \"id\": \"person_greeting\",\r\n    \"translation\": \"Hello {{.Person}}\"\r\n  },\r\n  {\r\n    \"id\": \"person_unread_email_count\",\r\n    \"translation\": {\r\n      \"one\": \"{{.Person}} has {{.Count}} unread email.\",\r\n      \"other\": \"{{.Person}} has {{.Count}} unread emails.\"\r\n    }\r\n  },\r\n  {\r\n    \"id\": \"person_unread_email_count_timeframe\",\r\n    \"translation\": {\r\n      \"one\": \"{{.Person}} has {{.Count}} unread email in the past {{.Timeframe}}.\",\r\n      \"other\": \"{{.Person}} has {{.Count}} unread emails in the past {{.Timeframe}}.\"\r\n    }\r\n  },\r\n  {\r\n    \"id\": \"program_greeting\",\r\n    \"translation\": \"Hello world\"\r\n  },\r\n  {\r\n    \"id\": \"your_unread_email_count\",\r\n    \"translation\": {\r\n      \"one\": \"You have {{.Count}} unread email.\",\r\n      \"other\": \"You have {{.Count}} unread emails.\"\r\n    }\r\n  }\r\n]\r\n```\r\n\r\nLanguages\r\n---------\r\n\r\nCurrently supports:\r\n* Arabic (`ar`)\r\n* English (`en`)\r\n* French (`fr`)\r\n* Spanish (`es`)\r\n\r\nMore languages are straightforward to add:\r\n\r\n1. Lookup the language's [CLDR plural rules](http://www.unicode.org/cldr/charts/latest/supplemental/language_plural_rules.html).\r\n2. Add the language to [language.go](i18n/language.go):\r\n\r\n    ```go\r\n\tRegisterLanguage(&Language{\r\n\t\tCode:             \"ar\",\r\n\t\tName:             \"العربية\",\r\n\t\tPluralCategories: newSet(Zero, One, Two, Few, Many, Other),\r\n\t\tIntFunc: func(i int64) PluralCategory {\r\n\t\t\tswitch i {\r\n\t\t\tcase 0:\r\n\t\t\t\treturn Zero\r\n\t\t\tcase 1:\r\n\t\t\t\treturn One\r\n\t\t\tcase 2:\r\n\t\t\t\treturn Two\r\n\t\t\tdefault:\r\n\t\t\t\tmod100 := i % 100\r\n\t\t\t\tif mod100 >= 3 && mod100 <= 10 {\r\n\t\t\t\t\treturn Few\r\n\t\t\t\t}\r\n\t\t\t\tif mod100 >= 11 {\r\n\t\t\t\t\treturn Many\r\n\t\t\t\t}\r\n\t\t\t\treturn Other\r\n\t\t\t}\r\n\t\t},\r\n\t\tFloatFunc: func(f float64) PluralCategory {\r\n\t\t\treturn Other\r\n\t\t},\r\n\t})\r\n    ```\r\n\r\n3. Submit a pull request!\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}